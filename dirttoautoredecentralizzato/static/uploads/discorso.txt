la mia tesi  è implementativa si proponeva di creare un' applicazione decentralizzata. Cioè un'applicazione che sfrutti i contratti intelligenti ethereum per implementare le sue funzionalità. Lo scopo individuato era di creare un portale  per la gestione del diritto d'autore su opere scritte che permette di riconoscere la paternità delle opere agli autori e a terzi di acqusitare licenze di utilizzo. Quindi tramite i requisiti è stata definita  una piattaforma all'interno della quale un utente autore,pagando un costo di deposito, può immettere il proprio testo per renderlo disponibile agli altri. Un secondo tipo di utente , acquirente, ha la possibilità di sfogliare il catalogo dei testi presenti e acquistare licenze di utillizzo. E'stata lasciata la psosibilità all'autore di bannare utenti specifici dall'acquisto delle licenze sulle sue opere.Sono stati definiti 2 tipi di licenze una di distribuzione, che permette cioè di distribuire per un certo numero di copie un testo , e una di riproduzione che permette di rappresentare o riprodurre un testo ad esempio di una canzone per un dato periodo di tempo. Il costo della licenza varia in base al numero di copie per la distribuzione o al periodo di validità per la riproduzione.Parte del costo pagato per la licenza viene devoluto all'autore.

Inizialmente sono stati definiti definito due contratti, uno per il certificato di paternità del testo e uno per le licenze, programmandoli in solidity.E' stato scelto come id del certiicato di paternità l'hash del file questo per impedire che lo stesso testo venga depositato più volte. Per le licenze l'id a partire è stato costruito a partire dall' indirizzo dell'utente che fa richiesta per la licenza e dall'hash dell'ultimo blocco presente sulla blockchain. Come rete di development è stato impiegato ganache un software che esegue una rete ethereum mononodo nella macchina su cui è installata e lascia a disposizione dei wallet contenti già ethereum per effettuare le transazioni. Fatto questo è stato curato prima l'aspetto frontend creando un interfaccia utente in html e css e javascript. Come gateway per la blockchain si è utilizzato metamask  che un'estensione browser che fa da wallet crypto e permette di effettuare transazioni. Il client si interfaccia con metamask tramite la sua API e con i conttratti usando la libreria web3.js. Lato backend è stato adottato django un framework per lo sviluppo di applicazioni web scritto in python . Il backend ha implementato 3 funzionalità principali : 1. un sistema di autenticazione basato sui wallet ethereum, creatosfruttando la crittografia assimetrica della blockchain. 2. mantenendo un database mirror di tutti i certificati generati per agevolare le operazioni di ricerca dell'utente effettuandole sul database e non sulla blockchain , per fare questo è stato necessario che il web server leggesse dalla blockchin tutti i certificati rilasciati e questo è stato  implementato grazie alla libreria web3.py. 3. che il server mantenesse tutti i file contenti le opere degli autori , rendendoli disponibili al download per gli utenti che acquistano le licenze , e effettuando un controllo antiplagio. Il controllo antiplagio è stato relizzato utilizzanod l'algoritmo SequenceMatcher del modulo difflib di python che rileva sequenze corripondenti nei dati in input. se il rateo di similarità tra due testi supera una soglia definità l'opera posta sotto esame viene segnalata come non autentica all'utente ma rimane comunque disponibile all'interno del catalogo.  si è astudiato poi come distriuire la piattaforma caricando il progetto django su un'istanza di aws , usando Gunigorn server HTTP specializzato in applicazioni python per servire le richieste e ho inserito un layer di sicurezza ssl usando NGNIX come reverse proxy per una connessione HTTPS generando un certificato autofirmato. Nel corso della valutazione è stata studiata  La responsività del sistema si è dimostrata buona. Per quanto riguarda i controlli antiplagio le tempistiche crescano proporzionalmente con il numero di testi depositati , nonostante questo i testi sono disponibili fin da quindi il limite è relativo. In conclusione si può dire che una soluzione ibrida che combina una parte centralizzata assieme alle funzionalità della blockchain sia la scelta più saggia e ottimale per creare applicazioni decentralizzate. Come sviluppi futuri ho pensato...
